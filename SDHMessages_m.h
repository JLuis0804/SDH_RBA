//
// Generated file, do not edit! Created by opp_msgtool 6.1 from inet/node/sdh/SDHMessages.msg.
//

#ifndef __SDHMESSAGES_M_H
#define __SDHMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif

class SDHVirtualContainer;
class SDHFrame;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/Packet_m.h" // import inet.common.packet.Packet

// cplusplus {{
#include "omnetpp.h"
#include "inet/common/packet/Packet.h"
// }}

/**
 * Enum generated from <tt>inet/node/sdh/SDHMessages.msg:11</tt> by opp_msgtool.
 * <pre>
 * enum VCType
 * {
 *     VC12 = 12;
 *     VC3 = 3;
 *     VC4 = 4;
 * }
 * </pre>
 */
enum VCType {
    VC12 = 12,
    VC3 = 3,
    VC4 = 4
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VCType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VCType& e) { int n; b->unpack(n); e = static_cast<VCType>(n); }

/**
 * Class generated from <tt>inet/node/sdh/SDHMessages.msg:18</tt> by opp_msgtool.
 * <pre>
 * class SDHVirtualContainer extends inet::Packet
 * {
 *     VCType vcType;
 *     int tributaryIndex;
 *     cPacket payloads[];
 * }
 * </pre>
 */
class INET_API SDHVirtualContainer : public ::inet::Packet
{
  protected:
    VCType vcType = static_cast<VCType>(-1);
    int tributaryIndex = 0;
    omnetpp::cPacket *payloads = nullptr;
    size_t payloads_arraysize = 0;

  private:
    void copy(const SDHVirtualContainer& other);

  protected:
    bool operator==(const SDHVirtualContainer&) = delete;

  public:
    SDHVirtualContainer(const char *name=nullptr);
    SDHVirtualContainer(const SDHVirtualContainer& other);
    virtual ~SDHVirtualContainer();
    SDHVirtualContainer& operator=(const SDHVirtualContainer& other);
    virtual SDHVirtualContainer *dup() const override {return new SDHVirtualContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual VCType getVcType() const;
    virtual void setVcType(VCType vcType);

    virtual int getTributaryIndex() const;
    virtual void setTributaryIndex(int tributaryIndex);

    virtual void setPayloadsArraySize(size_t size);
    virtual size_t getPayloadsArraySize() const;
    virtual const omnetpp::cPacket& getPayloads(size_t k) const;
    virtual omnetpp::cPacket& getPayloadsForUpdate(size_t k) { return const_cast<omnetpp::cPacket&>(const_cast<SDHVirtualContainer*>(this)->getPayloads(k));}
    virtual void setPayloads(size_t k, const omnetpp::cPacket& payloads);
    virtual void insertPayloads(size_t k, const omnetpp::cPacket& payloads);
    [[deprecated]] void insertPayloads(const omnetpp::cPacket& payloads) {appendPayloads(payloads);}
    virtual void appendPayloads(const omnetpp::cPacket& payloads);
    virtual void erasePayloads(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SDHVirtualContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SDHVirtualContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/node/sdh/SDHMessages.msg:26</tt> by opp_msgtool.
 * <pre>
 * class SDHFrame extends cPacket
 * {
 *     int stmLevel;
 *     SDHVirtualContainer vcArray[];
 *     bool isProtection;
 * }
 * </pre>
 */
class INET_API SDHFrame : public ::omnetpp::cPacket
{
  protected:
    int stmLevel = 0;
    SDHVirtualContainer *vcArray = nullptr;
    size_t vcArray_arraysize = 0;
    bool isProtection_ = false;

  private:
    void copy(const SDHFrame& other);

  protected:
    bool operator==(const SDHFrame&) = delete;

  public:
    SDHFrame(const char *name=nullptr);
    SDHFrame(const SDHFrame& other);
    virtual ~SDHFrame();
    SDHFrame& operator=(const SDHFrame& other);
    virtual SDHFrame *dup() const override {return new SDHFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getStmLevel() const;
    virtual void setStmLevel(int stmLevel);

    virtual void setVcArrayArraySize(size_t size);
    virtual size_t getVcArrayArraySize() const;
    virtual const SDHVirtualContainer& getVcArray(size_t k) const;
    virtual SDHVirtualContainer& getVcArrayForUpdate(size_t k) { return const_cast<SDHVirtualContainer&>(const_cast<SDHFrame*>(this)->getVcArray(k));}
    virtual void setVcArray(size_t k, const SDHVirtualContainer& vcArray);
    virtual void insertVcArray(size_t k, const SDHVirtualContainer& vcArray);
    [[deprecated]] void insertVcArray(const SDHVirtualContainer& vcArray) {appendVcArray(vcArray);}
    virtual void appendVcArray(const SDHVirtualContainer& vcArray);
    virtual void eraseVcArray(size_t k);

    virtual bool isProtection() const;
    virtual void setIsProtection(bool isProtection);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SDHFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SDHFrame& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline SDHVirtualContainer *fromAnyPtr(any_ptr ptr) { return check_and_cast<SDHVirtualContainer*>(ptr.get<cObject>()); }
template<> inline SDHFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<SDHFrame*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SDHMESSAGES_M_H

